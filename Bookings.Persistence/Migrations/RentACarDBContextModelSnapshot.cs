// <auto-generated />
using System;
using Bookings.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bookings.Persistence.Migrations
{
    [DbContext(typeof(RentACarDBContext))]
    partial class RentACarDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Bookings.Domain.Booking", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("BookingStatusID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RenterEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RenterID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RenterStartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VehicleID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BookingStatusID");

                    b.HasIndex("RenterID");

                    b.HasIndex("VehicleID");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("Bookings.Domain.BookingStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("BookingStatus", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Status = "Reserved"
                        },
                        new
                        {
                            ID = 2,
                            Status = "Confirmed"
                        });
                });

            modelBuilder.Entity("Bookings.Domain.Renter", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Renter", (string)null);
                });

            modelBuilder.Entity("Bookings.Domain.Vehicle", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("FleetQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfPassengerSeats")
                        .HasColumnType("int");

                    b.Property<decimal>("PeakPerDayRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("StandardPerDayRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VehicleTypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("VehicleTypeID");

                    b.ToTable("Vehicle", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            FleetQuantity = 5,
                            Make = "Fiat",
                            Model = "500",
                            NumberOfPassengerSeats = 40,
                            PeakPerDayRate = 145.7m,
                            StandardPerDayRate = 130.88m,
                            VehicleTypeID = 1
                        },
                        new
                        {
                            ID = 2,
                            FleetQuantity = 2,
                            Make = "Vauxhall",
                            Model = "Crossland",
                            NumberOfPassengerSeats = 4,
                            PeakPerDayRate = 180.30m,
                            StandardPerDayRate = 165.30m,
                            VehicleTypeID = 2
                        },
                        new
                        {
                            ID = 3,
                            FleetQuantity = 2,
                            Make = "Range Rover",
                            Model = "Evoque",
                            NumberOfPassengerSeats = 4,
                            PeakPerDayRate = 275.50m,
                            StandardPerDayRate = 250.00m,
                            VehicleTypeID = 3
                        },
                        new
                        {
                            ID = 4,
                            FleetQuantity = 1,
                            Make = "Mercedes-Benz",
                            Model = "E300 Cabriolet",
                            NumberOfPassengerSeats = 3,
                            PeakPerDayRate = 300.65m,
                            StandardPerDayRate = 270.22m,
                            VehicleTypeID = 5
                        },
                        new
                        {
                            ID = 5,
                            FleetQuantity = 2,
                            Make = "Mercedes-Benz",
                            Model = "V220d Sport MPV",
                            NumberOfPassengerSeats = 7,
                            PeakPerDayRate = 410.05m,
                            StandardPerDayRate = 362.30m,
                            VehicleTypeID = 4
                        },
                        new
                        {
                            ID = 6,
                            FleetQuantity = 3,
                            Make = "Range Rover",
                            Model = "Velar D300 R",
                            NumberOfPassengerSeats = 4,
                            PeakPerDayRate = 380.00m,
                            StandardPerDayRate = 350.99m,
                            VehicleTypeID = 3
                        },
                        new
                        {
                            ID = 7,
                            FleetQuantity = 3,
                            Make = "Citroen",
                            Model = "Grand Picasso",
                            NumberOfPassengerSeats = 6,
                            PeakPerDayRate = 380.00m,
                            StandardPerDayRate = 345.17m,
                            VehicleTypeID = 4
                        },
                        new
                        {
                            ID = 8,
                            FleetQuantity = 3,
                            Make = "Volkswagen",
                            Model = "Golf",
                            NumberOfPassengerSeats = 4,
                            PeakPerDayRate = 200.12m,
                            StandardPerDayRate = 180.04m,
                            VehicleTypeID = 1
                        },
                        new
                        {
                            ID = 9,
                            FleetQuantity = 3,
                            Make = "Mercedes-Benz",
                            Model = "A Class",
                            NumberOfPassengerSeats = 4,
                            PeakPerDayRate = 282.99m,
                            StandardPerDayRate = 270.31m,
                            VehicleTypeID = 1
                        },
                        new
                        {
                            ID = 10,
                            FleetQuantity = 2,
                            Make = "Skoda",
                            Model = "Octavia",
                            NumberOfPassengerSeats = 4,
                            PeakPerDayRate = 283.12m,
                            StandardPerDayRate = 272.42m,
                            VehicleTypeID = 1
                        },
                        new
                        {
                            ID = 11,
                            FleetQuantity = 1,
                            Make = "MG",
                            Model = "ZS Auto",
                            NumberOfPassengerSeats = 4,
                            PeakPerDayRate = 250.81m,
                            StandardPerDayRate = 245.72m,
                            VehicleTypeID = 2
                        });
                });

            modelBuilder.Entity("Bookings.Domain.VehicleType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("VehicleType", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Type = "Hatchback"
                        },
                        new
                        {
                            ID = 2,
                            Type = "SUV"
                        },
                        new
                        {
                            ID = 3,
                            Type = "4 -Wheel Drive"
                        },
                        new
                        {
                            ID = 4,
                            Type = "Minivan"
                        },
                        new
                        {
                            ID = 5,
                            Type = "Convertible"
                        });
                });

            modelBuilder.Entity("Bookings.Domain.Booking", b =>
                {
                    b.HasOne("Bookings.Domain.BookingStatus", "BookingStatus")
                        .WithMany("Bookings")
                        .HasForeignKey("BookingStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookings.Domain.Renter", "RenterDetails")
                        .WithMany("Bookings")
                        .HasForeignKey("RenterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookings.Domain.Vehicle", "Vehicle")
                        .WithMany("Booking")
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingStatus");

                    b.Navigation("RenterDetails");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Bookings.Domain.Vehicle", b =>
                {
                    b.HasOne("Bookings.Domain.VehicleType", "VehicleType")
                        .WithMany("Vehicle")
                        .HasForeignKey("VehicleTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Bookings.Domain.BookingStatus", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Bookings.Domain.Renter", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Bookings.Domain.Vehicle", b =>
                {
                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Bookings.Domain.VehicleType", b =>
                {
                    b.Navigation("Vehicle");
                });
#pragma warning restore 612, 618
        }
    }
}
